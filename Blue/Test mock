using Moq;
using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;

[TestFixture]
public class AdministrationControllerTests
{
    private Mock<ICompanyRepository> _companyRepositoryMock;
    private Mock<IMongoRepository<DeliveryOptionsResource>> _deliveryRepositoryMock;
    private Mock<IDeliveryOptionsMapper> _deliveryOptionsMapperMock;
    private AdministrationController _controller;

    [SetUp]
    public void Setup()
    {
        _companyRepositoryMock = new Mock<ICompanyRepository>();
        _deliveryRepositoryMock = new Mock<IMongoRepository<DeliveryOptionsResource>>();
        _deliveryOptionsMapperMock = new Mock<IDeliveryOptionsMapper>();

        _controller = new AdministrationController(
            orderRepository: null,
            skyReviewService: null,
            deliveryOptionsMapper: _deliveryOptionsMapperMock.Object,
            deliveryRepository: _deliveryRepositoryMock.Object,
            skyReviewRepository: null,
            mapConfigurationService: null,
            companyRepository: _companyRepositoryMock.Object,
            fileservice: null,
            deliveryService: null,
            raRuleservice: null,
            companyservice: null,
            formservice: null,
            reportFileImporter: null,
            configuration: null,
            reportRepository: null,
            reportFileExporter: null,
            groupRepository: null,
            storageservice: null,
            maintenanceMessageRepository: null,
            maintenanceMessageChoiceRepository: null,
            globalFormGroupRepository: null,
            globalFormGroupMapper: null,
            globalFormGroupImporter: null,
            clientErrorRepository: null,
            userRepository: null,
            authentication: null,
            deliveryServiceRepository: null,
            overrideCodeRepository: null
        );
    }

    [Test]
    public void GetCompanyDeliveryOptions_WhenNoProfileProvided_ShouldUseDefault()
    {
        // Arrange
        int companyId = 1;
        string profile = null;
        var company = new Company { Id = companyId, EmployerGuid = "12345" };
        var deliveryOptions = new List<DeliveryOptionsResource>();

        _companyRepositoryMock.Setup(repo => repo.GetById(companyId)).Returns(company);
        _deliveryRepositoryMock.Setup(repo => repo.GetCountByEmployerGuid(company.EmployerGuid)).Returns(0);
        _deliveryRepositoryMock.Setup(repo => repo.GetByEmployerGuid(company.EmployerGuid)).Returns(deliveryOptions);

        _deliveryOptionsMapperMock.Setup(mapper => 
            mapper.CheckD08AuthKey(It.IsAny<DeliveryOptionsResource>())).Returns(new DeliveryOptionsResource());

        _deliveryRepositoryMock.Setup(repo => repo.GetDeliveryOptionsDocument(It.IsAny<int>()))
            .Returns(new DeliveryOptionsMongoDocument());

        // Act
        var result = _controller.GetCompanyDeliveryOptions(companyId, profile);

        // Assert
        _companyRepositoryMock.Verify(repo => repo.GetById(companyId), Times.Once);
        _deliveryRepositoryMock.Verify(repo => repo.Save(It.IsAny<DeliveryOptionsResource>()), Times.Once);
    }
}
