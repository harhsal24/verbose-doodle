using ACI.SkyDelivery.Model.Entities;
using ACI.SkyDelivery.Model.Entities.Delivery;
using ACI.SkyDelivery.Model.Interfaces.Dbj;
using ACI.SkyDelivery.Services.Implementation;
using ACI.SkyDelivery.Services.Implementation.Report;
using ACI.SkyDelivery.Services.Interfaces;
using ACI.SkyDelivery.Services.Mappers.Delivery;
using ACI.SkyDelivery.Web.Controllers;
using MongoDB.Bson;
using Moq;
using NUnit.Framework;
using System.Collections.Generic;

namespace ACI.SkyDelivery.Tests.Delivery
{
    [TestFixture]
    public class DeliveryOptionsTests
    {
        private Mock<ICompanyRepository> _companyRepositoryMock;
        private Mock<IMongoRepository<DeliveryOptionsResource>> _deliveryRepositoryMock;
        private Mock<IDeliveryOptionsMapper> _deliveryOptionsMapperMock;
        private AdministrationController _controller;

        [SetUp]
        public void Setup()
        {
            _companyRepositoryMock = new Mock<ICompanyRepository>();
            _deliveryRepositoryMock = new Mock<IMongoRepository<DeliveryOptionsResource>>();
            _deliveryOptionsMapperMock = new Mock<IDeliveryOptionsMapper>();

            _controller = new AdministrationController(
                orderRepository: null,
                skyReviewService: null,
                fileservice: null,
                deliveryOptionsMapper: _deliveryOptionsMapperMock.Object,
                deliveryService: null,
                deliveryRepository: _deliveryRepositoryMock.Object,
                skyReviewRepository: null,
                raRuleservice: null,
                companyService: null,
                formservice: null,
                mapConfigurationservice: null,
                companyRepository: _companyRepositoryMock.Object,
                reportFileImporter: null,
                configuration: null,
                reportRepository: null,
                reportFileExporter: null,
                groupRepository: null,
                storageService: null,
                maintenanceMessageRepository: null,
                maintenanceMessageChoiceRepository: null,
                globalFormGroupRepository: null,
                globalFormGroupMapper: null,
                globalFormGroupImporter: null,
                clientErrorRepository: null,
                userRepository: null,
                authentication: null,
                deliveryServiceRepository: null,
                overrideCodeRepository: null
            );
        }

        [Test]
        public void Should_GetCompanyDeliveryOptionsTests()
        {
            // Arrange
            int companyId = 11;
            string profile = null;
            var company = new Company { Id = companyId, EmployerGuid = "12345" };
            var deliveryOptions = new List<DeliveryOptionsResource>();

            _companyRepositoryMock.Setup(repo => repo.GetById(companyId)).Returns(company);
            _deliveryRepositoryMock.Setup(repo => repo.GetCountByEmployerGuid(company.EmployerGuid)).Returns(0);
            _deliveryRepositoryMock.Setup(repo => repo.GetByEmployerGuid(company.EmployerGuid)).Returns(deliveryOptions);
            _deliveryOptionsMapperMock.Setup(mapper =>
                mapper.CheckD08AuthKey(It.IsAny<DeliveryOptionsResource>())
            ).Returns(new DeliveryOptionsResource());

            _deliveryRepositoryMock.Setup(repo => repo.GetDeliveryOptionsDocument(It.IsAny<ObjectId>()))
                .Returns(new BsonDocument());

            // Act
            var result = _controller.GetCompanyDeliveryOptions(companyId, profile);

            // Assert
            _companyRepositoryMock.Verify(repo => repo.GetById(companyId), Times.Once);
            _deliveryRepositoryMock.Verify(repo => repo.Save(It.IsAny<DeliveryOptionsResource>()), Times.Once);
        }
    }
}
