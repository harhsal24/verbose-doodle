public async Task<IEnumerable<Model.Action>> GetActionsAsync(GetActionContext? context = null)
{
    // Build the query
    var query = queryBuilder.Actions();
    var search = dynamoContext.QueryAsync<ActionItem>(query.Pk, query.Config);
    
    // Retrieve all action items from DynamoDB
    var actionItems = await search.GetRemainingAsync();

    // If the context is null or none of the context fields are provided, return all actions
    if (context == null || (context.DateType == null && context.StartDate == null && context.EndDate == null && 
                            context.ActionType == null && context.ActionStatus == null && context.User == null))
    {
        return actionItems.Select(action => mapper.Map<Model.Action>(action));
    }

    // Apply filters based on the provided context
    var filteredActions = actionItems
        .Where(act =>
            (context.ActionType == null || context.ActionType == act.Title) &&
            (context.ActionStatus == null || context.ActionStatus == act.Status) &&
            (context.User == null || context.User == act.Assignee) &&
            GetByDateType(context)(act) // Filter based on date type, start, and end dates
        )
        .ToList();

    // Map the filtered results to the desired model
    return filteredActions.Select(action => mapper.Map<Model.Action>(action));
}


private Func<ActionItem, bool> GetByDateType(GetActionContext context)
{
    // If DateType is null or empty, return a predicate that always returns true
    if (string.IsNullOrEmpty(context?.DateType))
        return _ => true;

    // Parse the start and end dates
    DateOnly? startDateOnly = string.IsNullOrEmpty(context?.StartDate)
        ? null
        : ApplicationTime.ParseDateOnly(context.StartDate!);

    DateOnly? endDateOnly = string.IsNullOrEmpty(context?.EndDate)
        ? null
        : ApplicationTime.ParseDateOnly(context.EndDate!);

    // Get the current time with the correct offset
    DateTimeOffset now = ApplicationTime.NowEst();

    // Convert startDateOnly and endDateOnly to DateTimeOffset
    DateTimeOffset? startDate = startDateOnly == null
        ? (DateTimeOffset?)null
        : new DateTimeOffset(startDateOnly.Value.Year, startDateOnly.Value.Month, startDateOnly.Value.Day, 0, 0, 0, now.Offset);

    DateTimeOffset? endDate = endDateOnly == null
        ? (DateTimeOffset?)null
        : new DateTimeOffset(endDateOnly.Value.Year, endDateOnly.Value.Month, endDateOnly.Value.Day, 23, 59, 59, now.Offset);

    // Return the appropriate predicate based on the DateType
    return context?.DateType switch
    {
        "CreatedAt" => (ActionItem act) =>
            (startDate == null || startDate <= DateTimeOffset.Parse(act.CreatedAt!)) &&
            (endDate == null || DateTimeOffset.Parse(act.CreatedAt!) <= endDate),

        "UpdatedAt" => (ActionItem act) =>
            !string.IsNullOrEmpty(act.StatusUpdatedAt) &&
            (startDate == null || startDate <= DateTimeOffset.Parse(act.StatusUpdatedAt!)) &&
            (endDate == null || DateTimeOffset.Parse(act.StatusUpdatedAt!) <= endDate),

        _ => throw new ArgumentException("Invalid comparison type")
    };
}
